// <auto-generated />
using System;
<<<<<<< HEAD
using CoreWiki.Data.EntityFramework.Security;
=======
>>>>>>> upstream/master
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

<<<<<<< HEAD
namespace CoreWiki.Data.EntityFramework.Security.Migrations
=======
namespace CoreWiki.Data.Security.Migrations
>>>>>>> upstream/master
{
    [DbContext(typeof(CoreWikiIdentityContext))]
    partial class CoreWikiIdentityContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
<<<<<<< HEAD
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024");

            modelBuilder.Entity("CoreWiki.Data.EntityFramework.Security.CoreWikiUser", b =>
=======
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846");

            modelBuilder.Entity("CoreWiki.Data.Security.CoreWikiUser", b =>
>>>>>>> upstream/master
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<bool>("CanNotify");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

<<<<<<< HEAD
                    b.Property<string>("DisplayName");

=======
>>>>>>> upstream/master
                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
<<<<<<< HEAD
                        new { Id = "e9d0a35d-5796-41c1-b0d9-b3ebddfab84c", ConcurrencyStamp = "5c4da24f-6b22-4549-a3a0-22a0c5c195d5", Name = "Authors", NormalizedName = "AUTHORS" },
                        new { Id = "682a9c69-f81f-4df4-aaea-b882a56f0087", ConcurrencyStamp = "91ca8adb-68ce-4eca-b427-8058d52ee8e9", Name = "Editors", NormalizedName = "EDITORS" },
                        new { Id = "44cec988-7324-4a8d-908b-fb3f965777e8", ConcurrencyStamp = "f557ba2b-4bc6-400c-8087-1ee80eb8928f", Name = "Administrators", NormalizedName = "ADMINISTRATORS" }
=======
                        new { Id = "5ca00d44-70cc-44a1-947d-a8daeb526ef0", ConcurrencyStamp = "615c7a08-8148-4add-b333-f5ca305400ac", Name = "Authors", NormalizedName = "Authors" },
                        new { Id = "a8f0e30f-73f2-44db-90b3-11797e5d2c5c", ConcurrencyStamp = "4f044959-1a5e-488b-a12d-daa39b5b2722", Name = "Editors", NormalizedName = "Editors" },
                        new { Id = "8b46d803-42ab-411a-ad96-21f58234c3fc", ConcurrencyStamp = "d2e1787b-db7a-424e-8ecb-56754fc0d71a", Name = "Administrators", NormalizedName = "Administrators" }
>>>>>>> upstream/master
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
<<<<<<< HEAD
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");
=======
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);
>>>>>>> upstream/master

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

<<<<<<< HEAD
                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");
=======
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);
>>>>>>> upstream/master

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
<<<<<<< HEAD
                    b.HasOne("CoreWiki.Data.EntityFramework.Security.CoreWikiUser")
=======
                    b.HasOne("CoreWiki.Data.Security.CoreWikiUser")
>>>>>>> upstream/master
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
<<<<<<< HEAD
                    b.HasOne("CoreWiki.Data.EntityFramework.Security.CoreWikiUser")
=======
                    b.HasOne("CoreWiki.Data.Security.CoreWikiUser")
>>>>>>> upstream/master
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

<<<<<<< HEAD
                    b.HasOne("CoreWiki.Data.EntityFramework.Security.CoreWikiUser")
=======
                    b.HasOne("CoreWiki.Data.Security.CoreWikiUser")
>>>>>>> upstream/master
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
<<<<<<< HEAD
                    b.HasOne("CoreWiki.Data.EntityFramework.Security.CoreWikiUser")
=======
                    b.HasOne("CoreWiki.Data.Security.CoreWikiUser")
>>>>>>> upstream/master
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
